import java.awt.Color;

public class myTakeOnXero {
	private GTerm gtMain;
	private GTerm gtTable;
	private GTerm gtPays;
	private String[] lastNames;
	private char[] firstNames;
	private short[] hours;
	private float[] hourlyRates;
	private int currentStaff;
	private int maxNumberStaff;
	private int i;
	private int j;
	private int arraysize;
	private int storedinput;
	private char[] tempFirstNames;
	private float[] tempHourlyRates;
	private short[] tempHours;
	private String[] tempLastNames;
	private String firstName;
	private String lastName;
	private String hourlyRate;

	public myTakeOnXero() {
		this.gtMain = new GTerm(300, 400);
		this.gtMain.setXY(1, 1);
		this.gtMain.println(
				"Welcome to my Payrate Program\nby using this you agree that\na high mark will be achieved\nor $100 cash :P");
		boolean terms = Boolean.parseBoolean(this.gtMain.getInputString("Do you agree to my terms?\ntrue or false"));
		if (terms) {
			this.gtMain.close();
			this.currentStaff = 0;
			this.maxNumberStaff = 1;
			this.lastNames = new String[this.maxNumberStaff];
			this.firstNames = new char[this.maxNumberStaff];
			this.hours = new short[this.maxNumberStaff];
			this.hourlyRates = new float[this.maxNumberStaff];
			this.gtTable = new GTerm(800, 800);
			this.gtTable.setBounds(1, 1, 800, 800);
			this.gtMain = new GTerm(600, 500);
			this.gtMain.setXY(70, 50);
			this.gtMain.setFontSize(12);
			this.gtMain.setFontColor(Color.RED);
			this.gtMain.setBackgroundColor(Color.GRAY);
			this.gtMain.setFontColor(Color.BLACK);
			this.gtMain.addButton("Add Record From text", this, "textfield");
			this.gtMain.println("");
			this.gtMain.addButton("Add Record Individualy", this, "addRecordInd");
			this.gtMain.println("");
			this.gtMain.addButton("Refresh", this, "refreshTable");
			this.gtMain.println("");
			this.gtMain.println("Enter First Name, Last name, Hourly rate");
			this.gtMain.addTextField("", 400);
			this.gtTable.setXY(1, 1);
			this.gtTable.setFontSize(14);
			this.gtTable.addTable(800, 700, "Index\tFirst name\tLastname\tPay rate\tHours\tWage\tOvertime\tTotal");
			this.gtTable.println("");
			this.gtTable.addButton("Edit entry", this, "edit");
			this.gtTable.addButton("Remove entry", this, "remove");
			this.gtTable.addButton("Enter Hours", this, "hours");
		} else {
			this.gtMain.showErrorDialog("You miss out");
			this.gtMain.close();

		}
	}

	public void addRecordInd() {
		this.arraysize = this.maxNumberStaff;
		this.storedinput = this.currentStaff;
		this.firstName = "";
		this.lastName = "";
		this.hourlyRate = "";
		arrayManipulation();
		firstnames();
		lastnames();
		hourlyRates();
		this.hours[this.storedinput] = 0;
		this.currentStaff++;
		refreshTable();
	}

	public double wagehours(double i) {
		if (this.hours[this.i] >= 38) {
			i = 38 * this.hourlyRates[this.i];
			return i;
		} else {
			i = this.hours[this.i] * this.hourlyRates[this.i];
			return i;
		}
	}

	public double overtime(double i) {
		if (this.hours[this.i] > 38) {
			double overtime = (hours[this.i] - 38);
			overtime = overtime * (this.hourlyRates[this.i] * 1.5);
			i = overtime;
			return i;
		} else {
			i = 0;
			return i;
		}
	}

	public void error() {
		this.gtMain.showErrorDialog("ERROR with input");
	}

	public void firstnames() {
		String validate = this.firstName;
		if (validate.isBlank()) {
			validate = gtMain.getInputString("Enter name for staff member " + (this.storedinput + 1));
		}
		while (validate.isBlank()) {
			error();
			validate = gtMain.getInputString("Enter name for staff member " + (this.storedinput + 1));
		}
		this.firstNames[this.storedinput] = validate.charAt(0);
	}

	public void lastnames() {
		String validate = this.lastName;
		if (validate.isBlank()) {
			validate = gtMain.getInputString("Enter last name for staff member " + (this.storedinput + 1));
		}
		while (validate.isBlank()) {
			error();
			this.lastNames[this.storedinput] = gtMain
					.getInputString("Enter last name for staff member " + (this.storedinput + 1));
		}
		this.lastNames[this.storedinput] = validate;
	}

	public void hourlyRates() {
		String validate = this.hourlyRate;
		if (validate.isBlank()) {
			validate = gtMain.getInputString("Enter hourly rate for staff member " + (this.storedinput + 1));
		}
		while (!validate.matches(".*\\d.*")) {
			error();
			validate = gtMain.getInputString("Enter hourly rate for staff member " + (this.storedinput + 1));
		}
		if (validate.matches(".*\\d.*")) {
			this.hourlyRates[this.storedinput] = Float.parseFloat(validate);
		}
	}

	public void userInput() {
		this.storedinput = Integer.parseInt(this.gtTable.getInputString("enter which staff member:"));
		this.storedinput = this.storedinput - 1;
	}

	public void hoursInput() {
		this.hours[this.storedinput] = Short.parseShort(gtTable.getInputString("Enter how many hours they worked: "));
		while (this.hours[this.storedinput] < 0 || this.hours[this.storedinput] > 60) {
			error();
			this.hours[this.storedinput] = Short
					.parseShort(gtTable.getInputString("Enter how many hours they worked:"));
		}
	}

	public void textfield() {
		this.arraysize = this.maxNumberStaff;
		this.storedinput = this.currentStaff;
		String inputs = this.gtMain.getTextFromEntry(0);
		if (inputs != null) {
			String[] inputData = inputs.split(",");
			this.firstName = inputData[0];
			this.lastName = inputData[1];
			this.hourlyRate = (inputData[2]);
			arrayManipulation();
			firstnames();
			lastnames();
			hourlyRates();
			this.hours[this.storedinput] = 0;
			this.currentStaff += 1;
			refreshTable();
		}
	}

	public void edit() {
		userInput();
		int section = Integer.parseInt(this.gtTable.getInputString(
				"What section would you like to edit\n1. First Name\n2. Last Name\n3.Hourly rate\n4.Hours"));
		if (section == 1) {
			firstnames();

		} else if (section == 2) {
			lastnames();

		} else if (section == 3) {
			hourlyRates();

		} else if (section == 4) {
			hoursInput();

		}
		refreshTable();

	}

	public void transferArray() {
		tempFirstNames[j] = this.firstNames[i];
		tempLastNames[j] = this.lastNames[i];
		tempHourlyRates[j] = this.hourlyRates[i];
		tempHours[j] = this.hours[i];
		this.j++;
		this.i++;
	}

	public void arrayManipulation() {
		this.j = 0;
		this.i = 0;
		if (this.currentStaff >= this.maxNumberStaff) {
			this.arraysize++;
		}
		this.tempFirstNames = new char[this.arraysize];
		this.tempLastNames = new String[this.arraysize];
		this.tempHourlyRates = new float[this.arraysize];
		this.tempHours = new short[this.arraysize];
		if (this.currentStaff >= this.maxNumberStaff) {
			if (this.currentStaff != this.storedinput) {
				if ((this.storedinput + 1) < this.currentStaff) {
					while (i < this.currentStaff) {
						if (i == (this.storedinput)) {
							this.i++;
						}
						transferArray();

					}
				} else if ((this.storedinput + 1) == this.currentStaff) {
					while (i < (this.currentStaff - 1)) {
						transferArray();
					}
				}
			} else if (this.currentStaff >= this.maxNumberStaff) {
				this.maxNumberStaff++;
				while (j < this.currentStaff) {
					transferArray();
				}
			}
			this.firstNames = tempFirstNames;
			this.lastNames = tempLastNames;
			this.hourlyRates = tempHourlyRates;
			this.hours = tempHours;
		}
	}

	public void remove() {
		userInput();
		while ((this.storedinput + 1) > this.currentStaff) {
			error();
			userInput();
		}
		this.arraysize = this.maxNumberStaff - 1;
		arrayManipulation();
		this.maxNumberStaff--;
		this.currentStaff--;
		refreshTable();

	}

	public void refreshTable() {
		this.gtTable.clearRowsOfTable(0);
		this.i = 0;
		while (this.i < this.currentStaff) {
			double wage = wagehours(0);
			double overtime = overtime(0);
			double total = wage + overtime;
			this.gtTable.addRowToTable(0, (i + 1) + "\t" + firstNames[this.i] + "\t" + this.lastNames[this.i] + "\t"
					+ this.hourlyRates[this.i] + "\t" + hours[this.i] + "\t" + wage + "\t" + overtime + "\t" + total);

			this.i += 1;
		}
	}

	public void hours() {
		userInput();
		hoursInput();
		refreshTable();

	}

	public static void main(String[] args) {
		myTakeOnXero a2obj = new myTakeOnXero();

	}

}
